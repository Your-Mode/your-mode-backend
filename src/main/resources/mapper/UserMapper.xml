<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yourmode.yourmodebackend.domain.user.mapper.UserMapper">

    <!-- 이메일 중복 확인: 해당 이메일이 users 테이블에 존재하는지 여부 반환 -->
    <select id="isEmailExists" resultType="boolean">
        SELECT EXISTS (
            SELECT 1 FROM users WHERE email = #{email}
        )
    </select>

    <!-- users 테이블에 새로운 유저 삽입, 자동 생성된 PK(userId) 반환 -->
    <insert id="insertUser" useGeneratedKeys="true" keyProperty="userId">
        INSERT INTO users (email, name, phone_number, role, is_terms_agreed, is_privacy_policy_agreed, is_marketing_agreed, created_at)
        VALUES (#{email}, #{name}, #{phoneNumber}, #{role}, #{isTermsAgreed}, #{isPrivacyPolicyAgreed}, #{isMarketingAgreed}, #{createdAt})
    </insert>

    <!-- user_profiles 테이블에 프로필 정보 삽입, 자동 생성된 PK(profileId) 반환 -->
    <insert id="insertUserProfile" useGeneratedKeys="true" keyProperty="profileId">
        INSERT INTO user_profiles (height, weight, gender, body_type_id, user_id)
        VALUES (#{height}, #{weight}, #{gender}, #{bodyTypeId}, #{userId})
    </insert>

    <!-- user_credentials 테이블에 로그인 관련 자격증명 저장, 자동 생성된 PK(userCredentialId) 반환 -->
    <insert id="insertUserCredential" useGeneratedKeys="true" keyProperty="userCredentialId">
        INSERT INTO user_credentials (password_hash, oauth_id, oauth_provider, user_id)
        VALUES (#{passwordHash}, #{oauthId}, #{oauthProvider}, #{userId})
    </insert>

    <!-- user_tokens 테이블에 리프레시 토큰 및 만료시간 저장, 자동 생성된 PK(tokenId) 반환 -->
    <insert id="insertUserToken" useGeneratedKeys="true" keyProperty="tokenId">
        INSERT INTO user_tokens (refresh_token, expired_at, user_id)
        VALUES (#{refreshToken}, #{expiredAt}, #{userId})
    </insert>

    <!--
        UserWithCredentialResultMap:
        User와 UserCredential 객체를 조합하여 매핑하기 위한 resultMap 정의
        - user 프로퍼티에 User 객체 매핑
        - credential 프로퍼티에 UserCredential 객체 매핑
    -->
    <resultMap id="UserWithCredentialResultMap" type="com.yourmode.yourmodebackend.domain.user.dto.internal.UserWithCredential">
        <association property="user" javaType="com.yourmode.yourmodebackend.domain.user.domain.User">
            <id column="user_id" property="userId"/>
            <result column="email" property="email"/>
            <result column="name" property="name"/>
            <result column="role" property="role"/>
        </association>
        <association property="credential" javaType="com.yourmode.yourmodebackend.domain.user.domain.UserCredential">
            <id column="user_credential_id" property="userCredentialId"/>
            <result column="password_hash" property="passwordHash"/>
            <result column="oauth_id" property="oauthId"/>
            <result column="oauth_provider" property="oauthProvider"/>
            <result column="user_id" property="userId"/>
        </association>
    </resultMap>

    <!--
        이메일로 User와 UserCredential 정보를 조회하는 쿼리
        users 테이블과 user_credentials 테이블을 user_id 기준으로 조인하여 조회
        결과는 UserWithCredentialResultMap 매핑으로 반환
    -->
    <select id="findUserWithCredentialByEmail"
            parameterType="string"
            resultMap="UserWithCredentialResultMap">
        SELECT
            u.user_id,
            u.email,
            u.name,
            u.role,

            c.user_credential_id,
            c.password_hash,
            c.oauth_id,
            c.oauth_provider,
            c.user_id
        FROM users u
                 JOIN user_credentials c ON u.user_id = c.user_id
        WHERE u.email = #{email}
    </select>

    <!--
    UserWithProfileResultMap:
    users 테이블과 user_profiles 테이블을 조합하여 매핑하기 위한 resultMap 정의
    - user 프로퍼티에 User 도메인 객체 매핑
    - profile 프로퍼티에 UserProfile 도메인 객체 매핑
    -->
    <resultMap id="UserWithProfileResultMap" type="com.yourmode.yourmodebackend.domain.user.dto.internal.UserWithProfile">
        <association property="user" javaType="com.yourmode.yourmodebackend.domain.user.domain.User">
            <id column="user_id" property="userId"/>
            <result column="email" property="email"/>
            <result column="name" property="name"/>
            <result column="phone_number" property="phoneNumber"/>
            <result column="role" property="role"/>
        </association>
        <association property="profile" javaType="com.yourmode.yourmodebackend.domain.user.domain.UserProfile">
            <id column="profile_id" property="profileId"/>
            <result column="height" property="height"/>
            <result column="weight" property="weight"/>
            <result column="gender" property="gender"/>
            <result column="body_type_id" property="bodyTypeId"/>
        </association>
    </resultMap>

    <!-- 이메일로 User와 UserProfile 정보를 조회하는 쿼리 -->
    <select id="findUserWithProfileByEmail"
            parameterType="string"
            resultMap="UserWithProfileResultMap">
        SELECT
            u.user_id,
            u.email,
            u.name,
            u.phone_number,
            u.role,

            p.profile_id,
            p.height,
            p.weight,
            p.gender,
            p.body_type_id
        FROM users u
                 LEFT JOIN user_profiles p ON u.user_id = p.user_id
        WHERE u.email = #{email}
    </select>

    <!-- user_id를 기준으로 user_tokens 정보를 조회하는 쿼리 -->
    <select id="findUserTokensByUserId" resultType="com.yourmode.yourmodebackend.domain.user.domain.UserToken">
        SELECT
            token_id,
            refresh_token,
            expired_at,
            user_id
        FROM
            user_tokens
        WHERE
            user_id = #{userId}
    </select>

    <!--
    특정 user_id에 대해 user_tokens 테이블의 리프레시 토큰(refresh_token)과
    만료일(expired_at)을 새로운 값으로 업데이트하는 쿼리
    -->
    <update id="updateRefreshToken">
        UPDATE user_tokens
        SET refresh_token = #{refreshToken},
            expired_at = #{expiredAt}
        WHERE user_id = #{userId}
    </update>

    <!--
    특정 user_id에 대해 user_tokens 테이블의 리프레시 토큰 정보를 삭제하는 쿼리
    -->
    <delete id="deleteUserToken">
        DELETE FROM user_tokens
        WHERE user_id = #{userId}
    </delete>

    <!--
    전화번호(phone_number)를 기준으로 users 테이블에서 사용자 정보를 조회하는 쿼리
    -->
    <select id="findUserByPhoneNumber" resultType="com.yourmode.yourmodebackend.domain.user.domain.User">
        SELECT *
        FROM users
        WHERE REPLACE(phone_number, '-', '') = #{phoneNumber}
    </select>

    <!--
    전화번호로 User와 UserCredential을 조인하여 비밀번호(password_hash)를 업데이트하는 쿼리
    users 테이블의 phone_number 컬럼을 조건으로 사용
-->
    <update id="updatePasswordByPhoneNumber" parameterType="map">
        UPDATE user_credentials c
            JOIN users u ON c.user_id = u.user_id
            SET c.password_hash = #{passwordHash}
        WHERE u.phone_number = #{phoneNumber}
    </update>

</mapper>
